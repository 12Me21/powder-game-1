/*  Original Variable Names + Notes:

    a  = [depends]          local variable
    b  = [depends]          local variable
    c  = [depends]          local variable
    d  = [depends]          local variable
    e  = [depends]          local variable
    f  = [depends]          local variable
    g  = [depends]          local variable
    h  = windowWidth        width of the game window
    i  = [N/A]              unused
    j  = [N/A]              unused
    k  = [unknown]          Vf object
    l()= floor              returns floor of number
    m()= spacedWrite        writes like k.a but with spacing
    n  = [depends]          local variable
    o  = [N/A]              unused
    p[]= [tbn]              holds color of each dot on the screen, used in place of Xa.b but is reset
    q  = [depends]          local variable
    r  = [depends]          local variable
    s  = dotNum             number of dots on the screen
    t[]= dotType            stores type of dot in the dot order
    u  = waterProp          index of natural properties of water
    v  = [depends]          local variable
    w  = [depends]          local variable
    x  = fireProp           index of natural properties of fire
    y  = [depends]          local variable
    z  = [depends]          local variable
    A  = [unknown]          holds type of each object
    B()= drawLine           draws line from (1st,2nd) to (3rd,4th) of color 5th
    C[]= dotOrderLocation   stores location of dots within dot order list
    D  = [unknown]          empty space constant (-5)
    E[]= momentum           stores momentum of each dot
    F  = [unknown]          air fan constant (-4)
    G  = blockGridWidth     width of the block-grid
    H  = [unknown]          how large each block-grid unit is (set to 4)
    I[]= [unknown]          wind direction/intensity (where this block-grid unit gets "mapped" to in relation)
    J[]= [unknown]          air pressure (<0 low, >0 high)
    K[]= [unknown]          array that tells which block-grid unit is block (1), empty (0), or oob (-1)
    L[]= dotCoor            stores exact coordinates for each dot
    M[]= dotCharge          stores charges for each dot
    N[]= [tbn]              object dot coordinates in current frame
    O[]= ballCoor           stores coordinates for each ball on screen
    P[]= [tbn]              stores ball attribute
    Q[]= dotLocation        stores location for each dot
    R[]= [tbn]              stores ball charges
    S()= rand               generates a random number between 0 and 1st arg
    T()= scale              scales 1st arg coors by value 2nd arg
    U()= delete             deletes the dot in the argument's location within the dot order
    V[]= [tbn]              state-of-matter of each element
    W()= randInInterval     generates a random integer between 1st arg and 2nd arg
    X()= randInteger        generates a random integer between 0 and 1st arg
    Y  = [depends]          local variable
    Z[]= [tbn]              object dot coordinates in previous frame
    $[]= ballMomentum       stores momentum of each ball
    aa = [unknown]          aa=1 causes updating number onscreen that represents an unknown measurement, for debugging purposes?
    ba = window             JavaScript keyword
    ca = windowHeight       height of the game window
    da = redDot             current element left-selected
    ea = blueDot            current element right-selected
    fa = overMenu           true if mouse is over menu, false otherwise
    ga = penSize            value of pen-s
    ha = dotMax             sets maximum dot setting S, M, L
    ia = dotLimits          array of three dot limits corresponding to S, M, and L resp.
    ja = s/lFlashLength     stores how many frames to make the Save/Load buttons highlight upon use
    ka = BG                 value of BG
    la = scale              value of scale (2^la)
    ma = scaleWindowX       x-coordinate of first column in scaled window
    na = scaleWindowY       y-coordinate of first row in scaled window
    oa = copyPaste          copy selected if 0, paste selected otherwise
    pa = [depends]          local variable
    qa = [unknown]          left x-coor of copy-paste rect
    ra = [unknown]          upper y-coor of copy-paste rect
    sa = [unknown]          right x-coor of copy-paste rect
    ta = [unknown]          lower y-coor of copy-paste rect
    ua = [unknown]          stores each dot from a copy-paste "snapshot"
    va = [unknown]          stores the charges of certain dots from a copy-paste "snapshot"
    wa = popUp              decides which pop-up message to draw
    xa = grid               value of grid
    ya = startStop          start selected if 0, stop selected otherwise
    za = speed              value of speed (2^za)
    Aa = side               off if 0, loop if 1
    Ba = pen                value of pen setting: [0,1,2,3]=[free,line,lock,paint]
    Ca = [unknown]          related to pen-lock
    Da = lineOrigX          stores x-coordinate of first endpoint when drawing with pen-line +8
    Ea = lineOrigY          stores y-coordinate of first endpoint when drawing with pen-line +8
    Fa = menu               str if 0, num if 1
    Ga = minimap            on if 1, off otherwise
    Ha = [unknown]          defines a struct consisting of integer variables d, u, f, n, g, k, b, shift, i, c and string variable file
    Ia = [unknown]          Ha structure related to pop-up messages, maybe to provide tools
    Ja = textString         string entered into as text in the Text function, upload title, etc.
    Ka = [depends]          local variable
    La = [depends]          local variable
    Ma = setFont            string entered into the Text function to set the font under the setFont -> option
    Na = font               value of font, [0,1,2,3,anything else]=[sans-serif,serif,monospace,setFont ->,serif]
    Oa = fontStyle          value of font style, [0,1,2,3](%4)=[PLAIN,BOLD,ITALIC,BOLD&ITALIC]
    Pa = fontSize           value of font size, [0,1,2,3,4,5,6,7,8,9,10]=[12,14,16,18,20,24,30,36,48,60,72]
    Qa = fonts              array of font names
    Ra = fontStyles         array of font styles
    Sa = fontSizes          array of font sizes
    Ta = [depends]          local variable
    Ua = [unknown]          stores R value of visual effect in BG-aura, or intensity in BG-dark or BG-TG
    Va = [unknown]          stores G value of visual effect in BG-aura
    Wa = [unknown]          stores B value of visual effect in BG-aura
    Xa = [unknown]          Ha structure that stores "background" color (.b stores color of each pixel on screen)
    Ya = [unknown]          Ha structure
    Za = cursorX            x-coordinate of the upper-left corner of the text rectangle
    $a = cursorY            y-coordinate of the upper-left corner of the text rectangle
    ab = [depends]          local variable
    bb = [unknown]          array of each dot on the screen used in save/load and minimap
    cb = [unknown]          array of the charge of each dot on the screen used in save/load
    db = [unknown]          hidden user string (suspected), used in checking if the player is logged in or not
    eb = language           Japanese if true, English if false
    fb = [unknown]          filename of image of uploaded work (suspected), used in checking if an uploaded work is being viewed or not
    gb = GetSet             stores the get/set code (minus checksum) of the current state
    hb = [unknown]          stores the upload thumbnail/minimap dot string
    ib = [unknown]          stores all element colors in hexadecimal in one string
    jb = [unknown]          used in checking whether the work is valid for upload
    kb = downloadPopUp      1 for successful download pop-up message, 2 for download error pop-up message, nothing otherwise
    lb = popUpString        value represents what is said during upload error (5 messages and default "Cannot upload.")
    mb = clicks             click counter
    nb = [tbn]              stores the click count for save/loading
    ob() = GameSave()       generates get/set code, calculates+appends checksum, and returns the resulting completed string (the get function in Get/Set?)
    pb() = save             temporarily saves the gamestate
    qb() = Get              generates get/set code and writes it to gb
    rb() = fromCharCode     JavaScript method; inputs character codes, returns string of characters corresponding to these
    sb = [unknown]          holds get/set code minus checksum in tb?
    tb() = GameLoad         the set function in Get/Set?
    ub() = Set              generates the gamestate according to the Get/Set code
    vb() = load             loads the game from the temporary savestate
    wb = [unknown]          used in xb
    xb() = initialize       initializes the gamestate
    yb() = [tbn]            initializes window, various arrays, and the random functions' seed
    zb = [unknown]          Ha object
    Ab() = antihack         checks if the location.hostname is the same as "dan-ball.jp"
    Bb() = [unknown]        related to the images of the font and wheel
    Cb = [unknown]          related to checking if loading images is successful(?)
    Db() = setTimeout       JavaScript method; calls the function 1st arg after 2nd arg milliseconds
    Eb() = [tbn]            regulates the number of milliseconds per frame
    Fb = [unknown]          generates the next frame of the game
    Gb() = upload           uploads, or retrieves the Get/Set code if viewing an uploaded work
    Hb = uploadStatus       stores the uploading success value(?)
    Ib = elementColor       stores colors of each element
    Jb = elementGray        stores bg-gray colors of each element
    Kb() = filledRect       draws filled-in rectangle (upper-left coors: (1st arg,2nd arg), lower-right coors: (3rd arg,4th arg), color: 5th arg)
    Lb = hostString         stores "DAN-BALL.jp (C) 2007 ha55ii", which is printed at the bottom of the menu
    Mb() = [unknown]        initializes some of the Ha structure values
    Nb() = [unknown]        game processor (iterates per frame(?))
    Ob() = userInterface    handles the user interface
    Pb = hostSameLength     0 if hostname is same length as "dan-ball.jp", 1 otherwise (Ob() increments it repeatedly if >0, freezing the game)
    Qb = [unknown]          stores x-coordinate of the cursor on game window
    Rb = [unknown]          stores y-coordinate of the cursor on game window
    Sb = nonClick           false if screen was left- or right-clicked in the previous frame, true otherwise
    Tb = startLeftClick     true if screen experiencing the start of a left-click this frame
    Ub = powderProp         index of natural properties of powder
    Vb = seedProp           index of natural properties of seed
    Wb = gunpowderProp      index of natural properties of gunpowder
    Xb = fanProp            index of natural properties of fan (fan doesn't like to move...)
    Yb = iceProp            index of natural properties of ice
    Zb = superballProp      index of natural properties of superball
    $b = cloneProp          index of natural properties of clone (if changed, clones powder upon contact with any element)
    ac = fireworkProp       index of natural properties of firework (if changed, defaults to creating itself, which has prop firework)
    bc = oilProp            index of natural properties of oil
    cc = c4Prop             index of natural properties of c-4
    dc = stoneProp          index of natural properties of stone
    ec = magmaProp          index of natural properties of magma
    fc = virusProp          index of natural properties of virus
    gc = nitroProp          index of natural properties of nitro
    hc = antProp            index of natural properties of ant
    ic = torchProp          index of natural properties of torch
    jc = gasProp            index of natural properties of gas
    kc = soapyProp          index of natural properties of soapy
    lc = thunderProp        index of natural properties of thunder
    mc = metalProp          index of natural properties of metal
    nc = bombProp           index of natural properties of bomb
    oc = laserProp          index of natural properties of laser
    pc = acidProp           index of natural properties of acid
    qc = vineProp           index of natural properties of vine
    rc = saltProp           index of natural properties of salt
    sc = glassProp          index of natural properties of glass
    tc = birdProp           index of natural properties of bird
    uc = mercuryProp        index of natural properties of mercury
    vc = sparkProp          index of natural properties of spark
    wc = fuseProp           index of natural properties of fuse
    xc = cloudProp          index of natural properties of cloud
    yc = pumpProp           index of natural properties of pump
    zc = steamProp          index of natural properties of steam
    Ac = wheelNum           number of wheels on the screen
    Bc = objectNum          number of objects on the screen
    Cc = createValue        value corresponding to create in A (40)
    Dc = playerValue        value corresponding to player in A (30)
    Ec = boxValue           value corresponding to box in A (20)
    Fc = fighterValue       value corresponding to fighter in A (20)
    Gc = ballCap            sets the cap on how many balls there can be on the screen at once
    Hc = ballExists         50 element array, 1=ball 0=no ball
    Ic[] = hotkey           stores whether a key corresponding to a certain ASCII code was pressed
    Jc() = boundedBy0       returns 1st arg if within [0,2nd arg], otherwise returns appropriate endpoint
    Kc() = mouseInRect      returns true if mouse is in rectangle (1st arg,2nd arg)->(3rd arg,4th arg), false otherwise
    Lc() = boundedBy        returns 1st arg if within [2nd arg,3rd arg], otherwise returns appropriate endpoint
    Mc = startRightClick    true if screen experiencing the start of a right-click this frame
    Nc = [tbn]              1 if frame contains a left-click, -1 if frame contains a right-click, 0 otherwise
    Oc = cursorX            stores the x-coordinate of the cursor+8, related to drawing
    Pc = cursorY            stores the y-coordinate of the cursor+8, related to drawing
    Qc = fps                stores the fps value (updates every second)
    Rc = fpsString          stores the string "fps"
    Sc = [unknown]          related to time passing between events, appears in menu when aa is manually changed to 1
    Tc() = [unknown]        compact version of gd
    Uc = languageFlag       contains the string "&b=", in the code it is followed by "0" if language is Japanese, "1" otherwise
    Vc[] = uploadResponse   stores site response during the upload process, used in checking upload errors
    Wc() = blackBorderPrint k.a with text border set to 0
    Xc() = [unknown]        related to Ia, looks like a compactification
    Yc() = rect             draws a rectangle of width 3rd arg and height 4th arg at corner (1st arg,2nd arg) of color 5th arg
    Zc = stopLeftClick      true if screen experiencing the termination of a left-click this frame
    $c() = promptText       calls a prompt for text from the user and stores the string in 2nd arg, message displayed is 1st arg
    ad() = [unknown]        involves colors of text
    bd = nameFlag           contains the string "&c=", in the code it is followed by the name of the upload ("d=" followed by the get/set-checksum code is not stored in a variable)
    cd = thumbnailFlag      contains the string "&e=", in the code it is followed by the thumbnail dot string
    dd = colorFlag          contains the string "&f=", in the code it is followed by the color string
    ed = clickFlag          contains the string "&g=", in the code it is followed by the click count
    fd[] = onKeyArray       stores whether a key corresponding to the keyboard order was pressed
    gd() = [unknown]        draws pop-up box(?)
    hd[] = buttonElement    stores what element is drawn when a certain menu button is selected
    id() = placeAt          attempts to place a dot of type 3rd arg at the coordinates (1st arg,2nd arg)
    jd = cursorAngle        od object that stores the sine, cosine of cursor angle (times something slightly bigger than 1)
    kd = blockGridHeight    height of the block-grid
    ld = blockGridUnits     number of block-grid units
    md[] = windCalc         stores running calculation of wind direction/intensity
    nd[] = airPressureCalc  stores running calculation of air pressure
    od = vect               defines a vector structure (with coordinates .x and .y)
    pd = pressureOffset     stores the air pressure offset
    qd = blockGridX         block grid x coors
    rd = blockGrodY         block grid y coors
    sd = [tbn]              stores the x-coordinate of the cursor+8 for drawing calculation purposes
    td = [tbn]              stores the y-coordinate of the cursor+8 for drawing calculation purposes
    ud = fworkAtt           fireworks attributes
    vd = playerAtt          player attributes
    wd = ballAtt            ball attributes
    xd[] = thermValue       stores the thermography values of each element for BG-TG
    yd = [tbn]              structure that holds functions for calculating frames
    zd() = angleOf          returns angle from information created from jd
    Ad = tau                hardcoded approximation of tau=2pi
    Bd[] = wheelY           y-coors of the wheels
    Cd[] = wheelX           x-coors of the wheels
    Dd = numBodyParts       stores constant of "body parts" per object: 28
    Ed[] = boxSize          stores the size of the boxes
    Fd() = wheelPlace       places wheel at coors (1st arg,2nd arg)
    Gd() = objPlace         places object corresponding to index 3rd arg (fighter if 0) at coors (1st arg,2nd arg) with size/attribute 4th arg
    Hd() = ballPlace        places ball at coors (1st arg,2nd arg) with attribute 3rd arg
    Id = pi                 hardcoded approximation of pi
    Jd[] = colorCharge      changes color of element to that of another
    Kd() = setCoors         given an od object (1st arg), set its coors to x=2nd arg and y=3rd arg
    Ld = maxDots            serves as an array size of 40,000 (max element count)
    Md[] = elementIsDragged stores whether or not the element is being dragged (1 if so, 0 otherwise)
    Nd = maxWheels          max number of wheels
    Od = bubbleCount        number of bubble "dots"
    Pd = maxBubbleDots      max number of bubble "dots"
    Qd = [unknown]          weird count involving bubbles
    Rd = bubbleEdgeLength   (roughly) length of bubble edges: 5
    Sd = [unknown]          related to angular resistance of bubble "joints": Rd/Id = 5/pi
    Td = maxObjects         max number of objects
    Ud[] = [tbn]            stores indices of dots that the corresponding object joint(s) are in contact with
    Vd[] = [tbn]            stores number of frames of each object after a certain event; if alive, since had ground contact; if dead, since death
    Wd[] = objIsDragged     stores 0 if object isn't being dragged, the joint number (that is being dragged) otherwise
    Xd[] = [unknown]        stores which player is which(?)
    Yd[] = ballIsDragged    stores whether or not the element is being dragged (1 if so, 0 otherwise)
    Zd() = paint            changes a dot at location 2nd arg of element 4th arg and all adjacent dots of the same element to element 3rd arg that has charge 5th arg (1st arg not used, but treated as a yd structure)
    $d = stopRightClick     true if screen experiencing the termination of a right-click this frame
    ae = prevLeftClick      true if screen experienced a left-click in the previous frame
    be = prevRightClick     true if screen experienced a right-click in the previous frame
    ce() = abs              returns the absolute value of the argument
    de() = [tbn]            sets 1st arg's coordinates equal to 2nd arg's coors minus 3rd arg's coors
    ee = [unknown]          stores the same values as jd, used only in .move
    fe() = octNormalize     normalizes 1st arg according to the octogon metric, returns the multiple it divided by
    ge() = [tbn]            handles how the game responds when something is clicked
    he() = setScaledBy      sets 1st arg equal to 2nd arg scaled by 3rd arg
    ie() = max              gives max of 1st,2nd args
    je() = octDistance      compact version of gg()
    ke[] = [unknown]        related to storing which bubble "dots" belong to which bubbles
    le() = placeBubbleDot   places bubble "dot" at coors (1st arg,2nd arg)
    me = wheelAngle         stores angles of wheels [0,16)
    ne = wheelMomentum      stores spin momentum of wheels
    oe() = deleteObj        deletes object at 1st arg's placement in object array
    pe = [tbn]              ball contact points relative to center
    qe = [tbn]              stores same value as Qb (difference seems to be referred to when scaled?)
    re = [tbn]              stores same value as Rb (difference seems to be referred to when scaled?) (these might be different when mouse is moving based on Mf and Nf)
    se() = min              gives min of 1st,2nd args
    te = taxicabAdjacent    array storing directions, giving priority to adjacent directions over diagonal ones
    ue = angleAdjacentX     stores the x-values of values in we
    ve = angleAdjacentY     stores the y-values of values in we
    we = angleAdjacent      array storing directions, giving priority to lower angles starting at the right
    xe() = swap             swaps dots in 1st/3rd arg and 2nd/4th arg using locations in the dot order
    ye() = move             attempts to move 1st arg into space decided by value in 2nd arg
    ze = sballLossX         superball bounce energy loss in the x-direction
    Ae = sballLossY         superball bounce energy loss in the y-direction
    Be = acidTolerance      holds number of number of dots of each element an acid dot can delete before dissolving
    Ce[][] = unitCircle     holds the x- and y-coordinates of 512 evenly-spaced points on the unit circle starting at (1,0)
    De = randValue          stores a random index for Fe[]
    Ee = randIncrement      stores a random increment of De inside Fe[]
    Fe[] = randArray        stores values i/1024 for integers i between 0 and 1023, in a randomized order
    Ge[] = [tbn]            stores placement in dot array of elements making contact with wheels(?)
    He[] = [tbn]            stores x-coors of elements making contact with wheels(?)
    Ie[] = [tbn]            stores y-coors of elements making contact with wheels(?)
    Je = [tbn]              number of dots making contact with wheels(?)
    Ke[] = bubbleDotX       stores x-coors of bubble "dots"
    Le[] = bubbleDotY       stores y-coors of bubble "dots"
    Me[] = bubbleIsDragged  stores whether or not the bubble dot is being dragged (1 if so, 0 otherwise)
    Ne() = bubbleResist     reduces distance between bubble "dots" 1st arg and 2nd arg
    Oe() = convertBubble    changes line between bubble "dots" between (1st arg,2nd arg) and (3rd arg,4th arg) to the element 5th arg
    Pe[] = [tbn]            stores momentum of each player/fighter joint after being kicked by a fighter
    Qe[] = canAttr          stores whether a player can have the attribute corresponding to a certain element (1 if so, 0 if not)
    Re() = forceJoint       sets the [1st arg]th joint to (original unaffected force + 2nd arg)*3rd arg
    Se() = [unknown]        object joint resistance(?)
    Te = objLoss            horizontal object bounce energy loss
    Ue() = [tbn]            computes next position of (1st arg)th object joint...
    Ve() = contactValue     returns a value depending on what the object joints (between 1st arg and 2nd arg) are in contact with
    We() = [tbn]            computes next position of dragged object
    Xe[] = [tbn]            stores time remaining (for each player) to be able to take a step
    Ye[] = [tbn]            stores time remaining (for each player) to be able to jump
    Ze[] = [tbn]            stores which way each player is facing (0 if left, 1 if right)
    $e = [tbn]              stores the element index of an attribute a given ball will attain during a jf() call
    af[] = [tbn]            stores x-momentum of each ball contact point upon conversion to an element
    bf[] = [tbn]            stores y-momentum of each ball contact point upon conversion to an element
    cf[] = [tbn]            stores x-coor placement of each ball contact point upon conversion to an element
    df[] = [tbn]            stores y-coor placement of each ball contact point upon conversion to an element
    ef[] = ballSpeed        ball gravitational acceleration and max rolling speed
    ff[] = ballWind         ball sensitivity to wind
    gf[] = elementBallExist stores whether a ball should have a default attribute for that element or not (1 if it does, 0 if not)
    hf() = eucDistance      calculates distance of 1st arg under the euclidean metric
    jf() = [tbn]            for the (1st arg)th ball, turn given element 3rd arg in dot order into the element index 2nd arg (ball contact conversion)
    kf() = eucNormalize     normalizes 1st arg under the euclidean metric
    lf() = destroyBall      at the (1st arg)th ball, with location 2nd arg, elementize ball according to element 4th arg with charge 5th arg, x-momentum shift 6th arg, y-momentum shift 7th arg, and momentum scale 8th arg (if 3rd arg=0); do the same except ignore momentum and charge if 3rd arg=1; do the same except ignore everything and just delete the ball if 3rd arg=2
    mf = document           JavaScript keyword
    nf = getIdCV            = document.getElementById("cv")
    of = get2D              = document.getElementById("cv").getContext("2d")
    pf = cImageData         = document.getElementById("cv").getContext("2d").createImageData(h,ca)
    qf = dataBuffer         = Uint8Array(document.getElementById("cv").getContext("2d").createImageData(h,ca).data.buffer)
    rf = windowConsole      = window.console
    sf = locationHostname   = location.hostname
    tf() = tryPImageData    tries of.putImageData(arguments)
    uf() = consoleLog       tries window.console.log(1st arg)
    vf = [tbn]              stores "./data/"
    wf = [tbn]              stores "canvas"
    xf = [tbn]              stores "2d"
    yf = [tbn]              index of hostname strings for checking the game is hosted by dan-ball.jp
    zf = [tbn]              stores "dan-ball.jp"
    Af[] = [tbn]            stores whether each key is pressed or not (false if not, true if so)
    Bf[] = [tbn]            stores ASCII codes for given keycode, only for non-shift-applied symbols(?)
    Cf[] = [tbn]            stores ASCII codes for given keycode, only for shift-applied symbols(?)
    Df = reqAniFrame        requests animation frame from various media
    Ef = frameCount         counts frames each second
    Ff = now                stores current timestamp for time measurement
    Gf = last               stores previous timestamp for time measurement
    Hf = [tbn]              stores the number of frames per second before transferring them to Qc(?)
    If = [tbn]
    Jf = [tbn]
    Kf = activeLeftClick    stores whether there is currently an active left-click (false if not, true if so)
    Lf = activeRightClick   stores whether there is currently an active right-click (false if not, true if so)
    Mf = [tbn]              cursor x-coordinate on window canvas
    Nf = [tbn]              cursor y-coordinate on window canvas
    Of = [tbn]              stores the value 20 as a maximum waittime for 60fps
    Pf = [tbn]
    Qf = [tbn]
    Rf = [tbn]              stores total number of milliseconds since game load(?)
    Sf = [tbn]              stores "ERROR"
    Tf[] = [tbn]
    Uf[] = [tbn]
    Vf = [tbn]
    Wf = [tbn]
    Xf() = [tbn]
    Yf = [tbn]
    Zf() = [tbn]            sets Mf and Nf
    $f = [tbn]              stores whether cursor is on game window or not (false if not, true if so)
    ag() = [tbn]            game window adjustments for touch screens(?)
    bg = [tbn]              stores "POST"
    cg = [tbn]              stores "="
    dg = [tbn]              stores "↵"
    eg = [tbn]              stores "Content-Type"
    fg = [tbn]              stores "application/x-www-form-urlencoded"
    gg() = octDistance      calculates distance of 1st arg under the octogon metric


    Element array according to index number:
    [empty space,block,powder,water,fire,seed,wood,g-powder,fan,wheel,ice,snow,steam,s-ball,clone,f-works,oil,c-4,fighter,stone,magma,virus,box,
    [     0     ,  1  ,   2  ,  3  ,  4 ,  5 ,  6 ,    7   , 8 ,  9  , 10, 11 ,  12 ,  13  ,  14 ,   15  , 16, 17,   18  ,  19 ,  20 ,  21 , 22,
     nitro,ant,torch,gas,soapy,thunder,metal,player,bomb,player,laser,acid,vine,salt,seawater,glass,bird,create,mercury,spark,fuse,cloud,pump]
       23 , 24,  25 , 26,  27 ,   28  ,  29 ,  30  , 31 ,  32  ,  33 , 34 , 35 , 36 ,   37   ,  38 , 39 ,  40  ,   41  ,  42 , 43 ,  44 , 45 ]
*/